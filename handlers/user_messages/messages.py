from keyboards.reply import reply_keyboards
from keyboards.inline import inline_keyboards
from aiogram import types

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from conductor import dp, bot

from additional.parser import parser
from datetime import datetime


@dp.message_handler(Text(equals=['–ù–∞–π—Ç–∏ —Ö–∞–ª—è–≤—É !', '–ê–¥—Ä–µ—Å —Ä–µ–≥–∏–æ–Ω–æ–≤']))
async def start(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–π—Ç–∏ —Ö–∞–ª—è–≤—É !':
        await message.reply('–ú–∏–Ω—É—Ç–∫—É, –ø—Ä–æ–≤–µ—Ä—è—é...')
        result_from_parsing = parser()
        day_today = datetime.now().strftime('%d-%m-%Y')
        mess_td = '–°–æ—Å—Ç–æ—è–Ω–∏–µ–º –Ω–∞ ' + f'<b>{day_today}</b>' + ' –Ω–∞—à–µ–ª —Ç–∞–∫—É—é —Ö–∞–ª—è–≤—É :\n<i>–î–ª—è –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞–±–µ—Ä–∏ –∏—Ö</i>\n\n'

        pretty_message = mess_td + " ,  ".join(
            f'<a href="{value}">{key}</a>' for key, value in result_from_parsing.items())
        await message.answer(pretty_message, parse_mode='HTML', disable_notification=True)
    elif message.text == '–ê–¥—Ä–µ—Å —Ä–µ–≥–∏–æ–Ω–æ–≤':
        await message.reply('–í—ã–±–µ—Ä–∏ —Ä–µ–≥–∏–æ–Ω –Ω–∏–∂–µ üëá', reply_markup=inline_keyboards.inline_region_kb())
    else:
        await message.answer('–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –Ω–∞ —ç—Ç–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å :(', reply_markup=types.ReplyKeyboardRemove())
